(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{516:function(a,t,s){"use strict";s.r(t);var e=s(2),n=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"_1-git-常用命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-git-常用命令"}},[a._v("#")]),a._v(" 1. git 常用命令")]),a._v(" "),s("ol",[s("li",[s("code",[a._v("git config --global user.name fengwei2002")]),a._v("  设置全局用户名，信息记录在  "),s("code",[a._v("~/.gitconfig")]),a._v("  文件中")]),a._v(" "),s("li",[s("code",[a._v("git config --global user.email konng0120@gmail.com")]),a._v("  设置全局邮箱地址，信息记录在  "),s("code",[a._v("~/.gitconfig")]),a._v("  文件中")]),a._v(" "),s("li",[s("code",[a._v("git init")]),a._v("  将当前目录配置成  "),s("code",[a._v("git")]),a._v("  仓库，信息记录在隐藏的  "),s("code",[a._v(".git")]),a._v("  文件夹中")]),a._v(" "),s("li",[s("code",[a._v("git add fileName")]),a._v("  将 XX 文件添加到暂存区")]),a._v(" "),s("li",[s("code",[a._v("git add .")]),a._v("  将所有待加入暂存区的文件加入暂存区")]),a._v(" "),s("li",[s("code",[a._v("git rm --cached fileName")]),a._v("  将文件从仓库索引目录中删掉")]),a._v(" "),s("li",[s("code",[a._v('git commit -m "给自己看的备注信息"')]),a._v("  将暂存区的内容提交到当前分支")]),a._v(" "),s("li",[s("code",[a._v("git status")]),a._v("  查看仓库状态")]),a._v(" "),s("li",[s("code",[a._v("git diff fileName")]),a._v("  查看 XX 文件相对于暂存区修改了哪些内容")]),a._v(" "),s("li",[s("code",[a._v("git log")]),a._v("  查看当前分支的所有版本\n"),s("ol",[s("li",[s("code",[a._v("git log --pretty=oneline")]),a._v("  将 git log 输出为一行显示")])])]),a._v(" "),s("li",[s("code",[a._v("git reflog")]),a._v("  查看 HEAD 指针的移动历史（包括被回滚的版本，用于版本跳转）")]),a._v(" "),s("li",[s("code",[a._v("git reset --hard HEAD^")]),a._v("  或  "),s("code",[a._v("git reset --hard HEAD~")]),a._v(" ：将代码库回滚到上一个版本")]),a._v(" "),s("li",[s("code",[a._v("git reset --hard HEAD^^")]),a._v("  往上回滚两次，以此类推")]),a._v(" "),s("li",[s("code",[a._v("git reset --hard HEAD~100")]),a._v("  往上回滚 100 个版本")]),a._v(" "),s("li",[s("code",[a._v("git reset --hard")]),a._v("  版本号：回滚到某一特定版本 （哈希值取前 7 位数字）")]),a._v(" "),s("li",[s("code",[a._v("git restore --staged fileName")]),a._v("  将 XX 文件从暂存区中移除")]),a._v(" "),s("li",[s("code",[a._v("git checkout — fileName")]),a._v(" "),s("code",[a._v("git restore fileName")]),a._v("  将 XX 文件尚未加入暂存区的修改全部撤销")]),a._v(" "),s("li",[s("code",[a._v("git remote add origin git@git.acwing.com:xxx/XXX.git")]),a._v("  将本地仓库关联到远程仓库 (后面的是 SCP)")]),a._v(" "),s("li",[s("code",[a._v("git push -u")]),a._v("  （第一次需要 - u 以后不需要）将当前分支推送到远程仓库")]),a._v(" "),s("li",[s("code",[a._v("git push origin branch_name")]),a._v(" ：将本地的某个分支推送到远程仓库 初始化时是  "),s("code",[a._v("master/main")])]),a._v(" "),s("li",[s("code",[a._v("git clone sshLink")]),a._v("  将远程仓库 XXX 下载到当前目录下")]),a._v(" "),s("li",[s("code",[a._v("git checkout -b branch_name")]),a._v(" ：创建并切换到 branch_name 这个分支")]),a._v(" "),s("li",[s("code",[a._v("git branch")]),a._v(" ：查看所有分支和当前所处分支")]),a._v(" "),s("li",[s("code",[a._v("git checkout branch_name")]),a._v(" ：切换到 branch_name 这个分支")]),a._v(" "),s("li",[s("code",[a._v("git merge branch_name")]),a._v(" ：将分支 branch_name 合并到当前分支上 手动合并冲突内容")]),a._v(" "),s("li",[s("code",[a._v("git branch -d branch_name")]),a._v(" ：删除本地仓库的 branch_name 分支")]),a._v(" "),s("li",[s("code",[a._v("git branch branch_name")]),a._v(" ：创建新分支")]),a._v(" "),s("li",[s("code",[a._v("git push --set-upstream origin branch_name")]),a._v(" ：设置本地的 branch_name 分支对应远程仓库的 branch_name 分支")]),a._v(" "),s("li",[s("code",[a._v("git push -d origin branch_name")]),a._v(" ：删除远程仓库的 branch_name 分支")]),a._v(" "),s("li",[s("code",[a._v("git pull")]),a._v(" ：将远程仓库的当前分支与本地仓库的当前分支合并")]),a._v(" "),s("li",[s("code",[a._v("git pull origin branch_name")]),a._v(" ：将远程仓库的 branch_name 分支与本地仓库的当前分支合并")]),a._v(" "),s("li",[s("code",[a._v("git branch --set-upstream-to=origin/branch_name1 branch_name2")]),a._v(" ：将远程的 branch_name1 分支与本地的 branch_name2 分支对应")]),a._v(" "),s("li",[s("code",[a._v("git checkout -t origin/branch_name")]),a._v("  将远程的 branch_name 分支拉取到本地")]),a._v(" "),s("li",[s("code",[a._v('git stash [save "save message"]')]),a._v(" ：将工作区和暂存区中尚未提交的修改存入栈中 (stash：藏匿)")]),a._v(" "),s("li",[s("code",[a._v("git stash apply")]),a._v(" ：将栈顶存储的修改恢复到当前分支，但不删除栈顶元素")]),a._v(" "),s("li",[s("code",[a._v("git stash drop")]),a._v(" ：删除栈顶存储的修改")]),a._v(" "),s("li",[s("code",[a._v("git stash pop")]),a._v(" ：将栈顶存储的修改恢复到当前分支，同时删除栈顶元素")]),a._v(" "),s("li",[s("code",[a._v("git stash list")]),a._v(" ：查看栈中所有元素")]),a._v(" "),s("li",[s("code",[a._v("git stash show")]),a._v(" : 显示做了哪些改动， 默认 show 第一个存储，如果要显示其他存储，后面加 stash@{num}, 比如第二个额 git stash show stash@{1}")]),a._v(" "),s("li",[s("code",[a._v("git stash clear")]),a._v(" : 删除所有缓存的 stash")])]),a._v(" "),s("h2",{attrs:{id:"_2-记录用户名和密码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-记录用户名和密码"}},[a._v("#")]),a._v(" 2. 记录用户名和密码")]),a._v(" "),s("p",[a._v("当每次推送都出现让输入 id 和密码时："),s("br"),a._v(" "),s("code",[a._v("bash here")])]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config --global credential.helper store\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" pull /git push （这里需要输入用户名和密码，以后就不用了）\n")])])]),s("p",[a._v("执行完 git push 再测试一次，解决了")]),a._v(" "),s("h2",{attrs:{id:"_3-添加新-github-账户"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-添加新-github-账户"}},[a._v("#")]),a._v(" 3. 添加新 GitHub 账户")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config --global user.name "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("username"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config --global user.email "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("email"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\nssh-keygen -t rsa -C "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"xxx@qq.com"')]),a._v("\n")])])]),s("ul",[s("li",[a._v("然后成功后会在 User 文件夹对应的用户下创建  "),s("code",[a._v(".ssh")]),a._v("  文件夹，其中有一个  "),s("code",[a._v("id_rsa.pub")]),a._v("  文件，复制其中的  "),s("code",[a._v("key")]),a._v("  不要删除或者添加字符：")]),a._v(" "),s("li",[a._v("之后返回 github/gitlab, 进入 Account Settings, 选择  "),s("code",[a._v("SSH and GPG Keys")]),a._v("  选项，在右上角 new ssh 中填写复制好的 Key")]),a._v(" "),s("li",[a._v("验证是否绑定本地成功，在  "),s("code",[a._v("bash")]),a._v("  中验证，输入指令：")])]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ssh")]),a._v(" -T git@github.com  \n")])])]),s("p",[a._v("如果第一次执行该指令，则会提示是否继续，（多个选项）如果我们 "),s("strong",[a._v("输入 yes")]),a._v(" 就会看到成功信息")]),a._v(" "),s("p",[a._v("HI..."),s("br"),a._v("\nbalabulabula")]),a._v(" "),s("p",[a._v("新生成密钥的时候，git clone 或者 push 的时候，也有可能会报这样的错误：")]),a._v(" "),s("p",[a._v("The authenticity of host 'github.com (192.30.255.112)' can't be established."),s("br"),a._v("\nRSA key fingerprint is "),s("s",[a._v("乱码")]),a._v(".")]),a._v(" "),s("p",[a._v("这个的原因是少了一个 known_hosts 文件，本来密钥文件应该是三个，现在是两个，便报了这样的错误，此时选择 yes 回车之后，便可，同时生成了缺少了的 known_hosts 文件：")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("Are you sure you want to "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("continue")]),a._v(" connecting "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("yes/no"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("? //输入 yes，回车即可正常使用\n")])])]),s("h2",{attrs:{id:"_4-windows-lf-和-crlf-的转换问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-windows-lf-和-crlf-的转换问题"}},[a._v("#")]),a._v(" 4. Windows LF 和 CRLF 的转换问题")]),a._v(" "),s("p",[a._v("用 vuepress 时 yarn run deploy 发现有这种警告信息")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("warning: LF will be replaced by CRLF "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("404")]),a._v(".html.\nThe "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("file")]),a._v(" will have its original line endings "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" your working directory\nwarning: LF will be replaced by CRLF "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" About/index.html.\nThe "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("file")]),a._v(" will have its original line endings "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" your working directory\n")])])]),s("p",[a._v("所以就准备来解决这个 warning")]),a._v(" "),s("p",[a._v("文本文件所使用的换行符，在不同的系统平台上是不一样的。UNIX/Linux 使用的是 0x0A（LF），早期的 Mac OS 使用的是 0x0D（CR），后来的 OS X 在更换内核后与 UNIX 保持一致了。但 DOS/Windows 一直使用 0x0D0A（CRLF） 作为换行符。")]),a._v(" "),s("p",[a._v("跨平台协作开发是常有的，不统一的换行符确实对跨平台的文件交换带来了麻烦。最大的问题是，在不同平台上，换行符发生改变时，Git 会认为整个文件被修改，这就造成我们没法  "),s("code",[a._v("diff")]),a._v(" ，不能正确反映本次的修改。还好 Git 在设计时就考虑了这一点，其提供了一个  "),s("code",[a._v("autocrlf")]),a._v("  的配置项，用于在提交和检出时自动转换换行符，该配置有三个可选项：")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("true")]),a._v(" : 提交时转换为 LF，检出时转换为 CRLF")]),a._v(" "),s("li",[s("code",[a._v("false")]),a._v(" : 提交检出均不转换")]),a._v(" "),s("li",[s("code",[a._v("input")]),a._v(" : 提交时转换为 LF，检出时不转换")])]),a._v(" "),s("p",[a._v("用如下命令即可完成配置：")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 提交时转换为 LF，检出时转换为 CRLF")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config --global core.autocrlf "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 提交时转换为 LF，检出时不转换")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config --global core.autocrlf input\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 提交检出均不转换")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config --global core.autocrlf "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v("\n")])])]),s("p",[a._v("如果把 autocrlf 设置为 false 时，warning 即可不显示，但另一个配置项 safecrlf 最好设置为 ture。该选项用于检查文件是否包含混合换行符，其有三个可选项：")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("true")]),a._v(" : 拒绝提交包含混合换行符的文件")]),a._v(" "),s("li",[s("code",[a._v("false")]),a._v(" : 允许提交包含混合换行符的文件")]),a._v(" "),s("li",[s("code",[a._v("warn")]),a._v(" : 提交包含混合换行符的文件时给出警告")])]),a._v(" "),s("p",[a._v("配置方法：")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 拒绝提交包含混合换行符的文件")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config --global core.safecrlf "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 允许提交包含混合换行符的文件")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config --global core.safecrlf "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 提交包含混合换行符的文件时给出警告")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config --global core.safecrlf warn\n")])])]),s("p",[a._v("到此，还并未解决我遇到的问题。实际上，我们有两种办法解决。")]),a._v(" "),s("p",[a._v("一种是将配置项改为如下的形式：")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config --global core.autocrlf "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config --global core.safecrlf "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v("\n")])])]),s("p",[a._v("这种方式是不推荐的，虽然代码能被提交，不失败且不报错，但是项目中的文件可能会包含两种格式的换行符。而且会有如上提到的问题，文件被视为整个被修改，无法 diff，之所以使用版本控制工具，最重要的原因之一就是其 diff 功能。")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config --global core.autocrlf "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config --global core.safecrlf warn\n")])])]),s("p",[a._v("这种就是对于混合文件报 warning，但是统一的文件不进行处理，要么全为 LF，要么全为 CRLF")]),a._v(" "),s("h3",{attrs:{id:"_4-1-使用替换工具适应多系统-lf-和-crlf"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-使用替换工具适应多系统-lf-和-crlf"}},[a._v("#")]),a._v(" 4.1. 使用替换工具适应多系统 LF 和 CRLF")]),a._v(" "),s("p",[a._v("另一种办法是，手动将文件的换行符转化为 LF，这可以通过编辑器来完成，大部分编辑器都可以将文件的换行符风格设置为 unix 的形式。VSCODE 选右下角换行格式即可，发现修改一个文件的换行符后会被视为文件全部修改，所以在实际应用中这一步不应该与内容的修改一起完成，内容修改完全完成后再进行换行符的修改，防止 diff 失效；"),s("br"),a._v("\n也可以使用 dos2unix 转换工具来完成，Windows 上 Git bash 客户端自带了该工具。其他系统上也可以安装该工具，例如 Ubuntu 上安装：")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt-get")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" dos2unix\n")])])]),s("p",[a._v("有了该工具，可以批量的把项目中的文件都转化一遍：")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("find")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v(" -type f "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("xargs")]),a._v(" dos2unix\n")])])]),s("p",[a._v("或者")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("find")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v(" -type f -exec dos2unix "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" +\n")])])]),s("p",[a._v("如果涉及到在多个系统平台上工作，推荐将 git 做如下配置：")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config --global core.autocrlf input\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config --global core.safecrlf "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v("\n")])])]),s("p",[a._v("也就是让代码仓库使用统一的换行符 (LF)，如果代码中包含 CRLF 类型的文件时将无法提交，需要用 dos2unix 或者其他工具手动转换文件类型。当然，可以根据自己的需要进行更为合适的配置！")]),a._v(" "),s("h2",{attrs:{id:"_5-yarn-更新依赖包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-yarn-更新依赖包"}},[a._v("#")]),a._v(" 5. yarn 更新依赖包")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("// 先下载\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("yarn")]),a._v(" global "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" npm-check-updates\n// 更新包（yarn.lock 和 package.json 同步更新）\nncu --upgrade --upgradeAll "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("yarn")]),a._v(" upgrade\n")])])]),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("yarn")]),a._v(" upgrade-interactive --latest\n// 需要手动选择升级的依赖包，按空格键选择，a 键切换所有，i 键反选选择\n")])])]),s("p",[a._v("当出现了 go install fatal: username 的错误的时候"),s("br"),a._v(" "),s("a",{attrs:{href:"https://medium.com/@pavelgordon/today-i-learned-solving-terminal-prompts-disabled-problem-with-go-and-gitlab-31124e796077",target:"_blank",rel:"noopener noreferrer"}},[a._v(" link1"),s("OutboundLink")],1),s("br"),a._v(" "),s("a",{attrs:{href:"https://christina04.hatenablog.com/entry/handle-error-when-go-get-private-repo",target:"_blank",rel:"noopener noreferrer"}},[a._v("link2"),s("OutboundLink")],1)]),a._v(" "),s("p",[a._v("以 uuzu 为例:")]),a._v(" "),s("p",[a._v(".gitconfig")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n        name "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" 封伟"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("封伟"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n        email "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" wfeng@yoozoo.com\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("core"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n        autocrlf "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" input\n        safecrlf "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" warn\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("credential"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n        helper "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" manager\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("url "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"ssh://git@gitlab.uuzu.com/"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n    insteadOf "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" https://gitlab.uuzu.com/\n")])])]),s("p",[a._v("最后两行写入配置就可以了")])])}),[],!1,null,null,null);t.default=n.exports}}]);